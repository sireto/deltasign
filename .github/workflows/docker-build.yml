name: Docker Image Build

on:
  push:
    branches:
      - dev
      - master
    tags:
      - "*"

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: builder

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: registry.sireto.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Determine compose file and env vars
        id: compose
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "file=docker-compose-staging.yml" >> $GITHUB_OUTPUT
            echo "tag_var=IMAGE_TAG" >> $GITHUB_OUTPUT
          else
            echo "file=docker-compose-dev.yml" >> $GITHUB_OUTPUT
            echo "tag_var=COMMIT_SHA" >> $GITHUB_OUTPUT
          fi

      - name: Build images
        run: |
          docker compose -f ${{ steps.compose.outputs.file }} build
        env:
          COMMIT_SHA: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
          IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}t
         
          #JWT secrets
          JWT_SECRET_KEY : ${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM : ${{ vars.JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES : ${{ vars.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}

          # Database details
          DB_PROVIDER : ${{ vars.STAGING_DB_PROVIDER }}
          DB_HOST : ${{ vars.STAGING_DB_HOST }}
          DB_USER : ${{ vars.STAGING_DB_USER }}
          DB_PASSWORD : ${{ secrets.STAGING_DB_PASSWORD }}
          DB_NAME : ${{ vars.STAGING_DB_NAME }}

          CARDANO_TRANSACTION_URL : ${{ vars.CARDANO_TRANSACTION_URL }}
          CARDANO_TRANSACTION_SECRET : ${{ secrets.CARDANO_TRANSACTION_SECRET }}

          # Email service
          EMAIL_SMTP_SERVER : ${{ vars.EMAIL_SMTP_SERVER }}
          EMAIL_SMTP_PORT : ${{ vars.EMAIL_SMTP_PORT }}
          EMAIL_USERNAME : ${{ vars.EMAIL_USERNAME }}
          EMAIL_PASSWORD : ${{ secrets.EMAIL_PASSWORD }}

          # TOTP
          OTP_VALIDITY : ${{ vars.OTP_VALIDITY }}

          # AWS
          AWS_ENDPOINT_URL : ${{ vars.AWS_ENDPOINT_URL }}
          AWS_ACCESS_KEY : ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY : ${{ secrets.AWS_SECRET_KEY }}
          AWS_BUCKET : ${{ vars.AWS_BUCKET }}

      - name: Push images
        run: |
          docker compose -f ${{ steps.compose.outputs.file }} push \
           || docker compose -f ${{ steps.compose.outputs.file }} push \
           || docker compose -f ${{ steps.compose.outputs.file }} push
        env:
          COMMIT_SHA: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
          IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
          #JWT secrets
          JWT_SECRET_KEY : ${{ secrets.JWT_SECRET_KEY }}
          JWT_ALGORITHM : ${{ vars.JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES : ${{ vars.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}

          # Database details
          DB_PROVIDER : ${{ vars.STAGING_DB_PROVIDER }}
          DB_HOST : ${{ vars.STAGING_DB_HOST }}
          DB_USER : ${{ vars.STAGING_DB_USER }}
          DB_PASSWORD : ${{ secrets.STAGING_DB_PASSWORD }}
          DB_NAME : ${{ vars.STAGING_DB_NAME }}

          CARDANO_TRANSACTION_URL : ${{ vars.CARDANO_TRANSACTION_URL }}
          CARDANO_TRANSACTION_SECRET : ${{ secrets.CARDANO_TRANSACTION_SECRET }}

          # Email service
          EMAIL_SMTP_SERVER : ${{ vars.EMAIL_SMTP_SERVER }}
          EMAIL_SMTP_PORT : ${{ vars.EMAIL_SMTP_PORT }}
          EMAIL_USERNAME : ${{ vars.EMAIL_USERNAME }}
          EMAIL_PASSWORD : ${{ secrets.EMAIL_PASSWORD }}

          # TOTP
          OTP_VALIDITY : ${{ vars.OTP_VALIDITY }}

          # AWS
          AWS_ENDPOINT_URL : ${{ vars.AWS_ENDPOINT_URL }}
          AWS_ACCESS_KEY : ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY : ${{ secrets.AWS_SECRET_KEY }}
          AWS_BUCKET : ${{ vars.AWS_BUCKET }}